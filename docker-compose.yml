version: '3.8'

services:
  mysql:
    image: mysql:8.0  # Spécifier une version stable
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "cindaa123."
      MYSQL_DATABASE: achatdb
    ports:
      - "3307:3306"  # Expose le port 3307 pour MySQL
    volumes:
      - mysql-data:/var/lib/mysql # Persistance des données
    networks:
      - monitoring

  backend:
    image: achat-backend-sindachammem-4twin9
    container_name: backend
    ports:
      - "8089:8089"  # Expose le port du backend
    depends_on:
      - mysql  # Assure que MySQL est démarré avant le backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/achatdb  # Connexion via le nom du service Docker
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: "cindaa123."  # Le mot de passe de MySQL
      SERVER_PORT: "8089"
      SERVER_SERVLET_CONTEXT_PATH: "/SpringMVC"
      MANAGEMENT_SERVER_PORT: "8089"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "*"
      MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: "/actuator"
      MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS: "always"
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
      SPRING_APPLICATION_NAME: "achat-backend"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_JPA_SHOW_SQL: "true"
    volumes:
      - ./logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8089/SpringMVC/actuator/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 60s
    networks:
      - monitoring

  frontend:
    image: achat-frontend-sindachammem-4twin9  # Nom de l'image frontend que tu as construite
    container_name: frontend
    ports:
      - "8082:80"  # Expose le port 80 pour accéder au frontend via Nginx
    depends_on:
      - backend 
    volumes:
      - ./logs/nginx:/var/log/nginx
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped  # Ajouter cette ligne
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"  # Mot de passe admin
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST:  "smtp.gmail.com:587"
      GF_SMTP_USER: "chammemcinda@gmail.com"
      GF_SMTP_PASSWORD: "lkrc qmfc brpi vavz"
      GF_SMTP_SKIP_VERIFY: "true"
      GF_SMTP_FROM_ADDRESS: "chammemcinda@gmail.com"
      GF_SMTP_FROM_NAME: "Grafana Alert"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - monitoring

volumes:
  mysql-data:
  grafana-storage:
  prometheus-data:

networks:
  monitoring:
    driver: bridge


